%option noyywrap
%{

#include "yacc.tab.h"

%}

INTCON     [0-9]+
IDENFR     [a-zA-Z_][a-zA-Z0-9_]*
STRCON     \"([^\"\\]|\\.)*\" 

%%

"//"[^\n]*      { /* 忽略单行注释 */ }
"/*"([^*]|"*"+[^*/])*"*"+"/" { /* 忽略多行注释 */ }

"main"              { return MAIN; }
"const"             { return CONST; }
"int"               { return INT; }
"break"             { return BREAK; }
"continue"          { return CONTINUE; }
"if"                { return IF; }
"else"              { return ELSE; }
"while"             { return WHILE; }
"getint"            { return GETINT; }
"printf"            { return PRINTF; }
"return"            { return RETURN; }
"void"              { return VOID; }


"!"                 { return yytext[0]; }
"&&"                { return AND; }
"||"                { return OR; }
"+"                 { return yytext[0]; }
"-"                 { return yytext[0]; }
"*"                 { return yytext[0]; }
"/"                 { return yytext[0]; }
"%"                 { return yytext[0]; }
"<"                 { return LESS; }
"<="                { return LEQ; }
">"                 { return GRE; }
">="                { return GRQ; }
"=="                { return EQL; }
"!="                { return NEQ; }
"="                 { return yytext[0]; }
";"                 { return yytext[0]; }
","                 { return yytext[0]; }
"("                 { return yytext[0]; }
")"                 { return yytext[0]; }
"["                 { return yytext[0]; }
"]"                 { return yytext[0]; }
"{"                 { return yytext[0]; }
"}"                 { return yytext[0]; }

{INTCON}            { return INTCON; }
{IDENFR}            { return IDENFR; }
{STRCON}            { return STRCON; }

[ \t\r\n]+          ;   // 忽略空白符
.                   { printf("TOKEN: UNKNOWN (%s)\n", yytext); }

%%

%{
#define YYDEBUG 1

#include <stdio.h>
#include <stdlib.h>

int yylex();
void yyerror(const char *s);

%}

%token MAIN CONST INT BREAK CONTINUE IF ELSE WHILE GETINT PRINTF RETURN VOID
%token AND OR LESS LEQ GRE GRQ EQL NEQ
%token INTCON IDENFR STRCON

%start CompUnit
%%

//CompUnit ConstDecl VarDecl
//FuncDef MainFuncDef Block Stmt

/*CompUnit
                            1
                            |
        ------------------------------------------
        | int               | const              | void
        2                   3                    4
        |
------------
| IDENFR   | MAIN
5        
|
-------
|(    | [=;

*/

CompUnit : CompUnit1List {
    printf("<CompUnit>\n");
};
CompUnit1List : CompUnit1 | CompUnit1 CompUnit 
CompUnit1 : INT CompUnit2 | CONST CompUnit3 {
    printf("<ConstDecl>\n");
} | VOID CompUnit4 {
    printf("<FuncDef>\n");
};
CompUnit2 : IDENFR CompUnit5 | MainFuncDef;
MainFuncDef : MAIN '(' ')' Block {
    printf("<MainFuncDef>\n");
};
CompUnit5 : '(' FuncFParams_ ')' Block {
    printf("<FuncDef>\n");
} | Array VarDef_value VarDefList ';' {
    printf("<VarDecl>\n");
};
Array : | '[' Exp ']';
VarDef_value : | '=' InitVal;
VarDefList :  | VarDefList ',' VarDef;
VarDef : IDENFR Array VarDef_value;

CompUnit3 : INT ConstDefList ';';
ConstDefList : ConstDef | ConstDefList ',' ConstDef;
ConstDef : IDENFR Array '=' InitVal;

InitVal : Exp | '{' ExpList '}';
ExpList : Exp | ExpList ',' Exp;

FuncFParams_ : | FuncFParams;
FuncFParams : FuncFParam | FuncFParams ',' FuncFParam;
FuncFParam : INT IDENFR;

CompUnit4 : IDENFR '(' FuncFParams_ ')' Block {
    printf("<FuncDef>\n");
};

Block : '{' BlockItemList '}' {
    printf("<Block>\n");
};
BlockItemList : BlockItem | BlockItemList BlockItem;
BlockItem : CompUnit1 | Stmt { //因为代码一定正确，因此可以把CompUnit弄过来定义，二者first无交集
            printf("<Stmt>\n");
        }; 
       
Stmt : LVal '=' Stmt1                   |
       ';'                              |
       Exp ';'                          |
       Block                            |
       IF '(' Cond ')' Stmt Stmt_else   |
       WHILE '(' Cond ')' Stmt          |
       BREAK ';'                        |
       CONTINUE ';'                     |
       RETURN Stmt_exp ';'              |
       PRINTF '(' STRCON Stmt_exp2')' ';' ;
Stmt1 :  Exp ';' | GETINT '(' ')' ';'
Stmt_else : | ELSE Stmt;
Stmt_exp  : | Exp;
Stmt_exp2 : | Stmt_exp2 ',' Exp;

Exp : AddExp;
Cond : LOrExp;
LVal : IDENFR Array;
PrimaryExp : '(' Exp ')' | LVal | INTCON;
UnaryExp : PrimaryExp | IDENFR '(' FuncRParams_ ')' | UnaryOp UnaryExp;
UnaryOp : '+' | '-' | '!';
FuncRParams_ : | FuncRParams;
FuncRParams : Exp | FuncRParams ',' Exp;
MulExp : UnaryExp | MulExp MulOp UnaryExp;
MulOp : '*' | '/' | '%';
AddExp : MulExp | AddExp AddOp MulExp;
AddOp : '+' | '-';
RelExp : AddExp | RelExp RelOp AddExp;
RelOp : LESS | GRE | LEQ | GRQ;
EqExp : RelExp | EqExp EqOp RelExp;
EqOp : EQL | NEQ;
LAndExp : EqExp | LAndExp AND EqExp;
LOrExp : LAndExp | LOrExp OR LAndExp;


%% 

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    yydebug = 1;  // 1为启用调试，0为不启用调试
    return yyparse();
}